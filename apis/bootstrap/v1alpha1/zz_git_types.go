/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GitObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Git repository files created and managed by the provider.
	RepositoryFiles map[string]*string `json:"repositoryFiles,omitempty" tf:"repository_files,omitempty"`
}

type GitParameters struct {

	// Author email for Git commits.
	// +kubebuilder:validation:Optional
	AuthorEmail *string `json:"authorEmail,omitempty" tf:"author_email,omitempty"`

	// Author name for Git commits.
	// +kubebuilder:validation:Optional
	AuthorName *string `json:"authorName,omitempty" tf:"author_name,omitempty"`

	// Branch in repository to reconcile from.
	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// The internal cluster domain.
	// +kubebuilder:validation:Optional
	ClusterDomain *string `json:"clusterDomain,omitempty" tf:"cluster_domain,omitempty"`

	// String to add to the commit messages.
	// +kubebuilder:validation:Optional
	CommitMessageAppendix *string `json:"commitMessageAppendix,omitempty" tf:"commit_message_appendix,omitempty"`

	// Toolkit components to include in the install manifests.
	// +kubebuilder:validation:Optional
	Components []*string `json:"components,omitempty" tf:"components,omitempty"`

	// List of extra components to include in the install manifests.
	// +kubebuilder:validation:Optional
	ComponentsExtra []*string `json:"componentsExtra,omitempty" tf:"components_extra,omitempty"`

	// Key id for selecting a particular key.
	// +kubebuilder:validation:Optional
	GpgKeyID *string `json:"gpgKeyId,omitempty" tf:"gpg_key_id,omitempty"`

	// GPG key ring for signing commits.
	// +kubebuilder:validation:Optional
	GpgKeyRing *string `json:"gpgKeyRing,omitempty" tf:"gpg_key_ring,omitempty"`

	// Passphrase for decrypting GPG private key.
	// +kubebuilder:validation:Optional
	GpgPassphraseSecretRef *v1.SecretKeySelector `json:"gpgPassphraseSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	HTTP []HTTPParameters `json:"http,omitempty" tf:"http,omitempty"`

	// Kubernetes secret name used for pulling the toolkit images from a private registry.
	// +kubebuilder:validation:Optional
	ImagePullSecret *string `json:"imagePullSecret,omitempty" tf:"image_pull_secret,omitempty"`

	// Interval at which to reconcile from bootstrap repository.
	// +kubebuilder:validation:Optional
	Interval *string `json:"interval,omitempty" tf:"interval,omitempty"`

	// Kustomization to override configuration set by default.
	// +kubebuilder:validation:Optional
	KustomizationOverride *string `json:"kustomizationOverride,omitempty" tf:"kustomization_override,omitempty"`

	// Log level for toolkit components.
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// The namespace scope for install manifests.
	// +kubebuilder:validation:Optional
	Namespace *string `json:"namespace,omitempty" tf:"namespace,omitempty"`

	// Deny ingress access to the toolkit controllers from other namespaces using network policies.
	// +kubebuilder:validation:Optional
	NetworkPolicy *bool `json:"networkPolicy,omitempty" tf:"network_policy,omitempty"`

	// Path relative to the repository root, when specified the cluster sync will be scoped to this path.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Configures the GitRepository source to initialize and include Git submodules in the artifact it produces.
	// +kubebuilder:validation:Optional
	RecurseSubmodules *bool `json:"recurseSubmodules,omitempty" tf:"recurse_submodules,omitempty"`

	// Container registry where the toolkit images are published.
	// +kubebuilder:validation:Optional
	Registry *string `json:"registry,omitempty" tf:"registry,omitempty"`

	// +kubebuilder:validation:Optional
	SSH []SSHParameters `json:"ssh,omitempty" tf:"ssh,omitempty"`

	// Name of the secret the sync credentials can be found in or stored to.
	// +kubebuilder:validation:Optional
	SecretName *string `json:"secretName,omitempty" tf:"secret_name,omitempty"`

	// List of toleration keys used to schedule the components pods onto nodes with matching taints.
	// +kubebuilder:validation:Optional
	TolerationKeys []*string `json:"tolerationKeys,omitempty" tf:"toleration_keys,omitempty"`

	// Url of git repository to bootstrap from.
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// Flux version.
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// If true watch for custom resources in all namespaces.
	// +kubebuilder:validation:Optional
	WatchAllNamespaces *bool `json:"watchAllNamespaces,omitempty" tf:"watch_all_namespaces,omitempty"`
}

type HTTPObservation struct {
}

type HTTPParameters struct {

	// Allows http Git url connections.
	// +kubebuilder:validation:Optional
	AllowInsecureHTTP *bool `json:"allowInsecureHttp,omitempty" tf:"allow_insecure_http"`

	// Certificate authority to validate self-signed certificates.
	// +kubebuilder:validation:Optional
	CertificateAuthority *string `json:"certificateAuthority,omitempty" tf:"certificate_authority"`

	// Password for basic authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Username for basic authentication.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username"`
}

type SSHObservation struct {
}

type SSHParameters struct {

	// Password for private key.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Private key used for authenticating to the Git SSH server.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// Username for Git SSH server.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username"`
}

// GitSpec defines the desired state of Git
type GitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GitParameters `json:"forProvider"`
}

// GitStatus defines the observed state of Git.
type GitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Git is the Schema for the Gits API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,flux}
type Git struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GitSpec   `json:"spec"`
	Status            GitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GitList contains a list of Gits
type GitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Git `json:"items"`
}

// Repository type metadata.
var (
	Git_Kind             = "Git"
	Git_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Git_Kind}.String()
	Git_KindAPIVersion   = Git_Kind + "." + CRDGroupVersion.String()
	Git_GroupVersionKind = CRDGroupVersion.WithKind(Git_Kind)
)

func init() {
	SchemeBuilder.Register(&Git{}, &GitList{})
}
